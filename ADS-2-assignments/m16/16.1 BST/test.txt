class BinaryST<Key extends Comparable<Key>, Value> {
	Node root;
	int size = 0;
	class Node<Key extends Comparable<Key>, Value> {
		Key key;
		Value value;
		Node left;
		Node right;
		
		Node() {

		}
		Node(Key key, Value value) {
			this.key = key;
			this.value = value;
		}
	}
	public boolean isEmpty() {
		return size == 0;
	}
	public void put(Key k, Value v) {
		Node newnode = new Node(k, v);
		if (isEmpty()) {
			newnode.left = null;
			newnode.right = null;
			root = newnode;
			size++;
			return;
		}
		Node parent = getParent(k);
		System.out.println(parent.key);

	}
	public void test(Key k, Value v) {
		Node n = new Node(k, v);
		if (isEmpty()) {
			n.left = null;
			n.right = null;
			root = n;
			size++;
			return;
		}
		if (size == 1) {
			root.left = n;
			n.left = null;
			n.right = null;
			size++;
			return;
		}
		if (size == 2) {
			root.right = n;
			n.left = null;
			n.right = null;
			size++;
			return;
		}

	}
	public Node getParent(Key k) {
		Node top = root;
		while (top.left != null && top.right != null) {
			if (k.compareTo(top.key) < 1) {
				top = top.left;
			} else if (k.compareTo(top.key) > 1) {
				top = top.right;
			}
		}


	}


}
